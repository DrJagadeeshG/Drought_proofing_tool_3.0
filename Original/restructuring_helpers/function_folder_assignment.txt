DROUGHT PROOFING TOOL - FUNCTION FOLDER ASSIGNMENT
==================================================
Generated: 2024-09-11
Location: drought_proofing_tool/Original/

This file assigns each function to its target folder and filename in the modular architecture.
Format: [FOLDER - FILENAME.PY] Function Description

ECONOMIC.PY (9 Functions)
========================
# Economic.py - Function 1: Calculates the number of intervention units needed based on economic life and lifespan [shared - economics.py]
# Economic.py - Function 2: Collects and structures supply-side intervention data including costs and specifications [shared - economics.py]
# Economic.py - Function 3: Collects and structures demand-side intervention data from crop calendar areas [shared - economics.py]
# Economic.py - Function 4: Collects and structures soil moisture intervention data from crop calendar areas [shared - economics.py]
# Economic.py - Function 5: Combines supply-side, demand-side, and soil moisture intervention data into unified dataset [shared - economics.py]
# Economic.py - Function 6: Calculates total cost by multiplying volume and unit cost [shared - economics.py]
# Economic.py - Function 7: Calculates Equalized Annual Cost using capital recovery factor [shared - economics.py]
# Economic.py - Function 8: Calculates annual maintenance costs based on percentage of equalized annual cost [shared - economics.py]
# Economic.py - Function 9: Calculates Net Present Value of intervention costs over project lifetime [shared - economics.py]

CROP_PATTERN.PY (29 Functions)
=============================
# crop_pattern.py - Function 1: Resamples time series data from one dataframe and merges with another from CSV [shared - utilities.py]
# crop_pattern.py - Function 2: Converts water depth in millimeters to volume in cubic meters [shared - utilities.py]
# crop_pattern.py - Function 3: Converts water volume in cubic meters to depth in millimeters [shared - utilities.py]
# crop_pattern.py - Function 4: Calculates percentage value from fraction and total [shared - utilities.py]
# crop_pattern.py - Function 5: Performs division with zero-denominator protection [shared - utilities.py]
# crop_pattern.py - Function 6: Performs subtraction with error handling for invalid inputs [shared - utilities.py]
# crop_pattern.py - Function 7: Optimizes dataframe memory by converting to smaller data types [shared - utilities.py]
# crop_pattern.py - Function 8: Reads and formats crop database from CSV file [shared - data_readers.py]
# crop_pattern.py - Function 9: Retrieves solar radiation data for specific latitude [shared - data_readers.py]
# crop_pattern.py - Function 10: Safely converts area list values to float with zero fallback [shared - utilities.py]
# crop_pattern.py - Function 11: Safely converts crop list preserving None values [shared - utilities.py]
# crop_pattern.py - Function 12: Processes seasonal crop data into structured dictionary format [shared - crop_processing.py]
# crop_pattern.py - Function 13: Assigns plot numbers to crops and calculates plot statistics [shared - crop_processing.py]
# crop_pattern.py - Function 14: Reads precipitation data and calculates 5-day rolling rainfall [shared - data_readers.py]
# crop_pattern.py - Function 15: Calculates number of days in a specific month and year [shared - utilities.py]
# crop_pattern.py - Function 16: Calculates monthly reference evapotranspiration using Hargreaves method [soil_storage_bucket/processing - evapotranspiration.py]
# crop_pattern.py - Function 17: Distributes monthly reference ET to daily values [soil_storage_bucket/processing - evapotranspiration.py]
# crop_pattern.py - Function 18: Filters crop pattern data to include only valid non-empty crops [shared - crop_processing.py]
# crop_pattern.py - Function 19: Combines seasonal attributes from input and intervention variables [shared - crop_processing.py]
# crop_pattern.py - Function 20: Calculates total area from land use and land cover components [shared - utilities.py]
# crop_pattern.py - Function 21: Converts seasonal data dictionary to list of dataframes with error handling [shared - utilities.py]
# crop_pattern.py - Function 22: Combines and normalizes all crop attributes to consistent lengths [shared - crop_processing.py]
# crop_pattern.py - Function 23: Applies evaporation reduction factors based on conservation practices [soil_storage_bucket/processing - evapotranspiration.py]
# crop_pattern.py - Function 24: Applies irrigation efficiency values based on intervention areas [shared - crop_processing.py]
# crop_pattern.py - Function 25: Calculates average soil evaporation reduction from conservation practices [soil_storage_bucket/processing - evapotranspiration.py]
# crop_pattern.py - Function 26: Retrieves yield response factor and economic data for crops [shared - crop_processing.py]
# crop_pattern.py - Function 27: Returns irrigation return flow coefficients based on crop type [shared - crop_processing.py]
# crop_pattern.py - Function 28: Calculates weighted return flow based on water source dependencies [shared - crop_processing.py]
# crop_pattern.py - Function 29: Converts specified dataframe columns to numeric with error handling [shared - utilities.py]

DROUGHT_PROOFING_TOOL.PY (3 Functions)
======================================
# drought_proofing_tool.py - Function 1: Saves all output dataframes to CSV files in scenario-specific folders [outputs - output_manager.py]
# drought_proofing_tool.py - Function 2: Processes command line arguments and runs the scenario [orchestrator - main_controller.py]
# drought_proofing_tool.py - Function 3: Copies scenario-specific intervention file to main interventions.csv [orchestrator - main_controller.py]

DRPF_FUNCTIONS.PY (24 Functions)
===============================
# drpf_functions.py - Function 1: Retrieves and caches season-wise crop data including areas and sowing details [shared - data_readers.py]
# drpf_functions.py - Function 2: Retrieves land use type areas including crop, fallow, built-up areas [shared - data_readers.py]
# drpf_functions.py - Function 3: Processes monthly runoff and converts to cubic meters [surface_water_bucket/processing - runoff_calculations.py]
# drpf_functions.py - Function 4: Calculates soil properties including AWC and depths [soil_storage_bucket/input_data - soil_properties.py]
# drpf_functions.py - Function 5: Retrieves season values with crop types and sowing details [shared - data_readers.py]
# drpf_functions.py - Function 6: Retrieves season data for crop type processing [shared - data_readers.py]
# drpf_functions.py - Function 7: Calculates consolidated curve numbers for crops and land use [surface_water_bucket/processing - curve_numbers.py]
# drpf_functions.py - Function 8: Processes crop details including efficiency and return flow values [shared - crop_processing.py]
# drpf_functions.py - Function 9: Calculates runoff discharge using curve number method [surface_water_bucket/processing - runoff_calculations.py]
# drpf_functions.py - Function 10: Calculates crop water storage and evaporation parameters [soil_storage_bucket/processing - water_storage.py]
# drpf_functions.py - Function 11: Calculates soil moisture deficit index for each plot [soil_storage_bucket/processing - soil_moisture_deficit.py]
# drpf_functions.py - Function 12: Calculates groundwater recharge for fallow and crop plots [aquifer_storage_bucket/influx - recharge_calculations.py]
# drpf_functions.py - Function 13: Calculates economic parameters for interventions [shared - economics.py]
# drpf_functions.py - Function 14: Calculates comprehensive intervention economics [shared - economics.py]
# drpf_functions.py - Function 15: Retrieves all curve number values for seasons [surface_water_bucket/processing - curve_numbers.py]
# drpf_functions.py - Function 16: Calculates crop evapotranspiration for each plot [soil_storage_bucket/outflux - evapotranspiration.py]
# drpf_functions.py - Function 17: Processes water management including storage and irrigation [orchestrator - water_balance_coordinator.py]
# drpf_functions.py - Function 18: Processes seasonal crop data and growth parameters [shared - crop_processing.py]
# drpf_functions.py - Function 19: Processes and calculates actual curve number values [surface_water_bucket/processing - curve_numbers.py]
# drpf_functions.py - Function 20: Processes final water balance calculations [orchestrator - water_balance_coordinator.py]
# drpf_functions.py - Function 21: Processes yearly data and calculates weighted averages [outputs - output_aggregator.py]
# drpf_functions.py - Function 22: Processes monthly climate and precipitation data [shared - data_readers.py]
# drpf_functions.py - Function 23: Main orchestrator running all drought proofing processes [orchestrator - main_controller.py]
# drpf_functions.py - Function 24: Entry point for drought proofing routines [orchestrator - main_controller.py]

KC_ET.PY (67 Functions)
======================
# kc_et.py - Function 1: Calculates initial crop coefficient (Kc) for initial growth stage [soil_storage_bucket/processing - crop_coefficients.py]
# kc_et.py - Function 2: Calculates crop coefficient (Kc) for development growth stage [soil_storage_bucket/processing - crop_coefficients.py]
# kc_et.py - Function 3: Calculates crop coefficient (Kc) for mid-season growth stage [soil_storage_bucket/processing - crop_coefficients.py]
# kc_et.py - Function 4: Calculates crop coefficient (Kc) for late season growth stage [soil_storage_bucket/processing - crop_coefficients.py]
# kc_et.py - Function 5: Processes all crop coefficients through all growth stages for multiple crops [soil_storage_bucket/processing - crop_coefficients.py]
# kc_et.py - Function 6: Calculates total crop coefficient by summing all growth stage coefficients [soil_storage_bucket/processing - crop_coefficients.py]
# kc_et.py - Function 7: Calculates irrigation crop coefficient (Kci) aggregated by plot [soil_storage_bucket/processing - crop_coefficients.py]
# kc_et.py - Function 8: Calculates crop evapotranspiration with special rice preparation handling [soil_storage_bucket/outflux - evapotranspiration.py]
# kc_et.py - Function 9: Calculates Stage 1 crop coefficients aggregated by plot [soil_storage_bucket/processing - crop_coefficients.py]
# kc_et.py - Function 10: Calculates soil evaporation coefficient (Kei) for all plots [soil_storage_bucket/outflux - evapotranspiration.py]
# kc_et.py - Function 11: Calculates daily soil evaporation (ESi) for all plots [soil_storage_bucket/outflux - evapotranspiration.py]
# kc_et.py - Function 12: Retrieves total growth days for a specific crop from crop database [shared - crop_processing.py]
# kc_et.py - Function 13: Calculates crop sowing start date based on year, month, and week [shared - crop_processing.py]
# kc_et.py - Function 14: Calculates remaining growth days for initial year of crop cycle [shared - crop_processing.py]
# kc_et.py - Function 15: Calculates remaining growth days for subsequent years of crop cycle [shared - crop_processing.py]
# kc_et.py - Function 16: Processes remaining growth days for all years in dataset [shared - crop_processing.py]
# kc_et.py - Function 17: Calculates monthly remaining growth days and updates monthly dataframe [shared - crop_processing.py]
# kc_et.py - Function 18: Calculates crop root depth based on growth stage and crop parameters [soil_storage_bucket/processing - root_depth.py]
# kc_et.py - Function 19: Calculates root depth for a specific crop throughout growing season [soil_storage_bucket/processing - root_depth.py]
# kc_et.py - Function 20: Calculates final aggregated root depth by plot for all crops [soil_storage_bucket/processing - root_depth.py]
# kc_et.py - Function 21: Calculates depletion factor for water stress threshold of specific crop [soil_storage_bucket/processing - water_stress.py]
# kc_et.py - Function 22: Calculates final aggregated depletion factor by plot for all crops [soil_storage_bucket/processing - water_stress.py]
# kc_et.py - Function 23: Returns available water content based on soil type classification [soil_storage_bucket/input_data - soil_properties.py]
# kc_et.py - Function 24: Extracts and validates soil type from input data structure [soil_storage_bucket/input_data - soil_properties.py]
# kc_et.py - Function 25: Calculates weighted average water content capacity for mixed soil layers [soil_storage_bucket/input_data - soil_properties.py]
# kc_et.py - Function 26: Calculates total area under soil moisture conservation practices [soil_storage_bucket/processing - conservation_practices.py]
# kc_et.py - Function 27: Calculates soil water content with conservation practice adjustments [soil_storage_bucket/processing - conservation_practices.py]
# kc_et.py - Function 28: Calculates final field capacity considering conservation and non-conservation areas [soil_storage_bucket/processing - conservation_practices.py]
# kc_et.py - Function 29: Calculates total available water (TAW) for each plot based on root depth [soil_storage_bucket/processing - water_capacity.py]
# kc_et.py - Function 30: Calculates readily available water (RAW) based on depletion factors [soil_storage_bucket/processing - water_capacity.py]
# kc_et.py - Function 31: Calculates total evaporable water (TEW) from soil surface layer [soil_storage_bucket/processing - water_capacity.py]
# kc_et.py - Function 32: Calculates readily evaporable water (REW) from soil surface [soil_storage_bucket/processing - water_capacity.py]
# kc_et.py - Function 33: Determines sown area based on remaining growth days [shared - crop_processing.py]
# kc_et.py - Function 34: Processes sown area calculations for all crops in crop pattern [shared - crop_processing.py]
# kc_et.py - Function 35: Calculates net sown area aggregated by plot from crop calendar [shared - crop_processing.py]
# kc_et.py - Function 36: Calculates soil evaporation reduction factors for conservation practices [soil_storage_bucket/processing - conservation_practices.py]
# kc_et.py - Function 37: Calculates final evaporation reduction factors for each crop [soil_storage_bucket/processing - conservation_practices.py]
# kc_et.py - Function 38: Calculates weighted evaporation reduction factors aggregated by plot [soil_storage_bucket/processing - conservation_practices.py]
# kc_et.py - Function 39: Retrieves cover type and treatment type for crops from database [shared - data_readers.py]
# kc_et.py - Function 40: Retrieves curve number (CN) values with multiple fallback strategies [surface_water_bucket/input_data - curve_number_data.py]
# kc_et.py - Function 41: Calculates curve number values for all crops considering two soil layers [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 42: Calculates weighted actual CN2 value from two soil layer contributions [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 43: Calculates actual curve numbers for all crops using input distributions [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 44: Calculates reduced curve numbers considering conservation interventions [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 45: Retrieves curve number for fallow land based on soil type [surface_water_bucket/input_data - curve_number_data.py]
# kc_et.py - Function 46: Calculates actual fallow curve number from two soil layer contributions [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 47: Returns curve number for crop based on sown area status [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 48: Updates crop curve numbers in dataframe for all crops [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 49: Calculates total sown area across all crops with area limit enforcement [shared - crop_processing.py]
# kc_et.py - Function 50: Calculates area-weighted consolidated curve number for all crops [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 51: Calculates fallow area from net sown area and actual crop areas [shared - crop_processing.py]
# kc_et.py - Function 52: Calculates land use fraction from area and total area [shared - utilities.py]
# kc_et.py - Function 53: Returns fallow curve number based on fallow area presence [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 54: Calculates area-weighted final curve number from all land uses [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 55: Adjusts curve number based on slope using Williams formula [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 56: Calculates CN1 (dry conditions) from CN2 using standard formula [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 57: Calculates CN3 (wet conditions) from CN2 using standard formula [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 58: Determines crop dormancy status based on sown area [shared - crop_processing.py]
# kc_et.py - Function 59: Calculates antecedent moisture condition based on rainfall and dormancy [surface_water_bucket/processing - moisture_conditions.py]
# kc_et.py - Function 60: Selects appropriate curve number based on antecedent moisture condition [surface_water_bucket/processing - curve_numbers.py]
# kc_et.py - Function 61: Calculates water abstraction parameters for runoff calculation [surface_water_bucket/processing - runoff_calculations.py]
# kc_et.py - Function 62: Calculates groundwater recharge from precipitation [aquifer_storage_bucket/influx - recharge_calculations.py]
# kc_et.py - Function 63: Calculates net rainfall after removing groundwater recharge [surface_water_bucket/influx - precipitation_processing.py]
# kc_et.py - Function 64: Calculates surface runoff using SCS curve number method [surface_water_bucket/processing - runoff_calculations.py]
# kc_et.py - Function 65: Applies runoff calculation only when rainfall exceeds initial abstraction [surface_water_bucket/processing - runoff_calculations.py]
# kc_et.py - Function 66: Calculates effective rainfall by subtracting runoff from net rainfall [surface_water_bucket/processing - runoff_calculations.py]
# kc_et.py - Function 67: Aggregates daily runoff to monthly totals and merges with monthly data [surface_water_bucket/processing - runoff_calculations.py]

SMD.PY (24 Functions)
====================
# smd.py - Function 1: Determines soil evaporation stress condition based on water deficits [soil_storage_bucket/processing - water_stress.py]
# smd.py - Function 2: Calculates soil evaporation stress coefficient based on moisture conditions [soil_storage_bucket/processing - water_stress.py]
# smd.py - Function 3: Calculates actual soil evaporation considering water stress and reduction factors [soil_storage_bucket/outflux - evapotranspiration.py]
# smd.py - Function 4: Determines crop transpiration stress condition based on water availability [soil_storage_bucket/processing - water_stress.py]
# smd.py - Function 5: Calculates crop transpiration stress coefficient based on soil moisture [soil_storage_bucket/processing - water_stress.py]
# smd.py - Function 6: Calculates actual crop evapotranspiration considering water stress [soil_storage_bucket/outflux - evapotranspiration.py]
# smd.py - Function 7: Calculates soil moisture deficit using water balance approach [soil_storage_bucket/processing - soil_moisture_deficit.py]
# smd.py - Function 8: Distributes plot-level actual evapotranspiration to individual crops [soil_storage_bucket/outflux - evapotranspiration.py]
# smd.py - Function 9: Calculates groundwater natural recharge when soil is at field capacity [aquifer_storage_bucket/influx - recharge_calculations.py]
# smd.py - Function 10: Updates groundwater natural recharge for all plots in dataset [aquifer_storage_bucket/influx - recharge_calculations.py]
# smd.py - Function 11: Aggregates daily groundwater recharge to monthly values for crops [aquifer_storage_bucket/influx - recharge_calculations.py]
# smd.py - Function 12: Calculates soil evaporation coefficient for fallow land [soil_storage_bucket/outflux - evapotranspiration.py]
# smd.py - Function 13: Calculates potential soil evaporation for fallow areas [soil_storage_bucket/outflux - evapotranspiration.py]
# smd.py - Function 14: Calculates soil moisture deficit for fallow land areas [soil_storage_bucket/processing - soil_moisture_deficit.py]
# smd.py - Function 15: Calculates actual soil evaporation for fallow areas without crops [soil_storage_bucket/outflux - evapotranspiration.py]
# smd.py - Function 16: Calculates groundwater natural recharge from fallow land areas [aquifer_storage_bucket/influx - recharge_calculations.py]
# smd.py - Function 17: Aggregates daily groundwater recharge from fallow areas to monthly totals [aquifer_storage_bucket/influx - recharge_calculations.py]
# smd.py - Function 18: Calculates total fallow area including non-crop land uses for recharge [aquifer_storage_bucket/influx - recharge_calculations.py]
# smd.py - Function 19: Calculates area-weighted average groundwater recharge across all land uses [aquifer_storage_bucket/influx - recharge_calculations.py]
# smd.py - Function 20: Aggregates daily recharge values to monthly totals for water balance [aquifer_storage_bucket/influx - recharge_calculations.py]
# smd.py - Function 21: Calculates irrigation water requirements as difference between ET and actual ET [soil_storage_bucket/outflux - irrigation_demand.py]
# smd.py - Function 22: Aggregates daily irrigation water requirements to monthly values [soil_storage_bucket/outflux - irrigation_demand.py]
# smd.py - Function 23: Calculates weighted irrigation efficiency from surface and groundwater sources [shared - irrigation_efficiency.py]
# smd.py - Function 24: Calculates overall irrigation efficiency considering all intervention types [shared - irrigation_efficiency.py]

USER_INPUT.PY (15 Functions)
===========================
# user_input.py - Function 1: Clears the file paths cache for testing or configuration changes [shared - data_readers.py]
# user_input.py - Function 2: Returns cached file paths for datasets based on input source and master path [shared - data_readers.py]
# user_input.py - Function 3: Converts various input types to float with fallback to default value [shared - utilities.py]
# user_input.py - Function 4: Cached CSV reader to avoid repeated disk I/O operations [shared - data_readers.py]
# user_input.py - Function 5: Handles value retrieval from CSV or manual sources for variables [shared - data_readers.py]
# user_input.py - Function 6: Returns kei coefficient value based on climate type [shared - data_readers.py]
# user_input.py - Function 7: Retrieves general input variables using handle_value_retrieval [shared - data_readers.py]
# user_input.py - Function 8: Retrieves crop-related variables for Kharif, Rabi, and Summer seasons [shared - data_readers.py]
# user_input.py - Function 9: Retrieves supply-side intervention parameters and converts to float [shared - data_readers.py]
# user_input.py - Function 10: Retrieves demand-side intervention area values from crop calendar [shared - data_readers.py]
# user_input.py - Function 11: Retrieves demand-side intervention cost and lifespan parameters [shared - data_readers.py]
# user_input.py - Function 12: Retrieves soil moisture intervention area values from crop calendar [shared - data_readers.py]
# user_input.py - Function 13: Retrieves soil moisture intervention parameters including CN reduction values [shared - data_readers.py]
# user_input.py - Function 14: Collects and organizes all input variables into ordered dictionary [orchestrator - input_collector.py]
# user_input.py - Function 15: Collects and organizes all intervention variables into ordered dictionary [orchestrator - input_collector.py]

WA.PY (43 Functions)
===================
# wa.py - Function 1: Reads irrigation data and merges with monthly dataframe [shared - data_readers.py]
# wa.py - Function 2: Calculates aquifer storage limit based on parameters [aquifer_storage_bucket/processing - storage_capacity.py]
# wa.py - Function 3: Calculates residual groundwater storage [aquifer_storage_bucket/processing - storage_tracking.py]
# wa.py - Function 4: Calculates surface area from volume and depth [surface_water_bucket/processing - surface_calculations.py]
# wa.py - Function 5: Calculates added monthly recharge from infiltration [aquifer_storage_bucket/influx - recharge_calculations.py]
# wa.py - Function 6: Calculates recharge capacity for water harvesting structures [aquifer_storage_bucket/influx - recharge_capacity.py]
# wa.py - Function 7: Calculates potential evapotranspiration from surface water [surface_water_bucket/outflux - evaporation.py]
# wa.py - Function 8: Calculates canal water supply availability [surface_water_bucket/influx - water_supply.py]
# wa.py - Function 9: Calculates irrigation water requirement after canal supply [soil_storage_bucket/outflux - irrigation_demand.py]
# wa.py - Function 10: Calculates potential groundwater recharge from structures [aquifer_storage_bucket/influx - recharge_calculations.py]
# wa.py - Function 11: Calculates domestic water requirements [aquifer_storage_bucket/outflux - domestic_demand.py]
# wa.py - Function 12: Calculates non-domestic water requirements [aquifer_storage_bucket/outflux - domestic_demand.py]
# wa.py - Function 13: Calculates groundwater needs for domestic use [aquifer_storage_bucket/outflux - domestic_demand.py]
# wa.py - Function 14: Calculates surface water needs [surface_water_bucket/outflux - water_demand.py]
# wa.py - Function 15: Calculates abstracted surface water [surface_water_bucket/outflux - water_abstraction.py]
# wa.py - Function 16: Calculates remaining water after domestic surface water use [surface_water_bucket/processing - water_balance.py]
# wa.py - Function 17: Calculates complex water storage dynamics and abstractions [orchestrator - water_balance_coordinator.py]
# wa.py - Function 18: Calculates percentage of irrigation water requirement fulfilled [outputs - water_metrics.py]
# wa.py - Function 19: Calculates crop water requirement met for each crop [outputs - water_metrics.py]
# wa.py - Function 20: Resamples monthly data to yearly aggregates [outputs - output_aggregator.py]
# wa.py - Function 21: Calculates crop yields for irrigated and rainfed areas [outputs - yield_calculations.py]
# wa.py - Function 22: Calculates yields for all crops [outputs - yield_calculations.py]
# wa.py - Function 23: Calculates weighted averages for yield and water metrics [outputs - output_aggregator.py]
# wa.py - Function 24: Adds runoff to recharge calculations [aquifer_storage_bucket/influx - recharge_calculations.py]
# wa.py - Function 25: Calculates final runoff after storage [surface_water_bucket/outflux - runoff_disposal.py]
# wa.py - Function 26: Calculates final runoff including rejected recharge [surface_water_bucket/processing - water_balance.py]
# wa.py - Function 27: Calculates final groundwater recharge [aquifer_storage_bucket/influx - recharge_calculations.py]
# wa.py - Function 28: Calculates final evapotranspiration from water balance [soil_storage_bucket/outflux - evapotranspiration.py]
# wa.py - Function 29: Calculates biological evapotranspiration from crop and soil [soil_storage_bucket/outflux - evapotranspiration.py]
# wa.py - Function 30: Gets crop water requirement in mm for all crops [outputs - water_metrics.py]
# wa.py - Function 31: Gets percentage of crop water requirement met [outputs - water_metrics.py]
# wa.py - Function 32: Gets yield percentages for all crops [outputs - yield_calculations.py]
# wa.py - Function 33: Gets drought proofing index [outputs - drought_metrics.py]
# wa.py - Function 34: Gets crop water requirement for crop year [outputs - water_metrics.py]
# wa.py - Function 35: Gets crop water requirement met for crop year [outputs - water_metrics.py]
# wa.py - Function 36: Gets yield percentages for crop year [outputs - yield_calculations.py]
# wa.py - Function 37: Gets drought proofing index for crop year [outputs - drought_metrics.py]
# wa.py - Function 38: Processes year data based on calendar or crop year [outputs - output_aggregator.py]
# wa.py - Function 39: Gets earliest sowing month from crop plan [shared - crop_processing.py]
# wa.py - Function 40: Processes water year data for crop or calendar year [outputs - output_aggregator.py]
# wa.py - Function 41: Calculates yields for water year analysis [outputs - yield_calculations.py]
# wa.py - Function 42: Calculates yields for water year for all crops [outputs - yield_calculations.py]
# wa.py - Function 43: Calculates weighted averages for water year metrics [outputs - output_aggregator.py]

SUMMARY
=======
Total Functions: 218 (ALL ASSIGNED TO MODULAR ARCHITECTURE)

FOLDER BREAKDOWN:
================
ORCHESTRATOR:
- main_controller.py: Main workflow coordination functions
- water_balance_coordinator.py: Water balance orchestration
- input_collector.py: Input data collection and organization

AQUIFER_STORAGE_BUCKET:
- influx/recharge_calculations.py: Groundwater recharge calculations
- influx/recharge_capacity.py: Recharge capacity calculations
- outflux/domestic_demand.py: Domestic and non-domestic water demands
- processing/storage_capacity.py: Aquifer storage capacity calculations
- processing/storage_tracking.py: Groundwater storage tracking

SOIL_STORAGE_BUCKET:
- input_data/soil_properties.py: Soil properties and AWC calculations
- processing/crop_coefficients.py: Crop coefficient calculations
- processing/root_depth.py: Root depth calculations
- processing/water_stress.py: Water stress calculations
- processing/water_capacity.py: Water capacity calculations
- processing/conservation_practices.py: Conservation practice effects
- processing/soil_moisture_deficit.py: SMD calculations
- processing/water_storage.py: Soil water storage
- outflux/evapotranspiration.py: ET and evaporation calculations
- outflux/irrigation_demand.py: Irrigation demand calculations

SURFACE_WATER_BUCKET:
- input_data/curve_number_data.py: Curve number data retrieval
- influx/precipitation_processing.py: Precipitation processing
- influx/water_supply.py: Water supply availability
- processing/curve_numbers.py: Curve number calculations
- processing/runoff_calculations.py: Runoff calculations
- processing/moisture_conditions.py: Antecedent moisture conditions
- processing/surface_calculations.py: Surface area calculations
- processing/water_balance.py: Surface water balance
- outflux/evaporation.py: Surface water evaporation
- outflux/water_demand.py: Surface water demand
- outflux/water_abstraction.py: Water abstraction
- outflux/runoff_disposal.py: Final runoff disposal

OUTPUTS:
- output_manager.py: Output file management
- output_aggregator.py: Data aggregation and yearly processing
- water_metrics.py: Water requirement metrics
- yield_calculations.py: Yield calculations
- drought_metrics.py: Drought proofing metrics

SHARED:
- utilities.py: General utility functions
- data_readers.py: Data reading and caching functions
- crop_processing.py: Crop data processing functions
- economics.py: Economic calculations
- irrigation_efficiency.py: Irrigation efficiency calculations

This modular architecture separates concerns by water storage buckets and provides clear separation between input processing, calculations, and outputs.